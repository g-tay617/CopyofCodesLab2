#include <formatio.h>
#include <advanlys.h>
#include <ansi_c.h>
#include <NIDAQmx.h>
#include <cvirte.h>		
#include <userint.h>
#include <stdlib.h>
#include "Lab2.h"
static int plot2 = 0;
static int plot1 = 0;
static int32 x;
static double time1;
static float64 freq;
static float64 daqarray[10000];
static float64 daqarrayin[10000];
static float * tarray;
static float tarray1[10000];
static double * zero1;
static float freq1[10000];
static double ftrans[10000];
static double savefilearray1[40000];
static double savefilearray2[40000];
static int a;



static int panelHandle;
static TaskHandle DataAcq;

int main (int argc, char *argv[])
{
	if (InitCVIRTE (0, argv, 0) == 0)
		return -1;	/* out of memory */
	if ((panelHandle = LoadPanel (0, "Lab2.uir", PANEL)) < 0)
		return -1;
	DisplayPanel (panelHandle);
	RunUserInterface ();
	DiscardPanel (panelHandle);
	return 0;
}

int CVICALLBACK Bye (int panel, int control, int event,
					 void *callbackData, int eventData1, int eventData2)
{
	switch (event)
	{
		case EVENT_COMMIT:
			QuitUserInterface (0);
			break;
	}
	return 0;
}

int CVICALLBACK AcquireData (int panel, int control, int event,
							 void *callbackData, int eventData1, int eventData2)
{
	switch (event)
	{
		case EVENT_COMMIT:
			
			
			
			if (plot1 != 0)
				{
					DeleteGraphPlot (panelHandle, PANEL_GRAPH, plot1, VAL_IMMEDIATE_DRAW);
					DeleteGraphPlot (panelHandle, PANEL_GRAPH_2, plot2, VAL_IMMEDIATE_DRAW);
				}
				
			DAQmxCreateTask ("DataAcq", &DataAcq);
			
			DAQmxCreateAIVoltageChan (DataAcq, "Dev1/ai0", "", DAQmx_Val_Diff, -10, 10, DAQmx_Val_Volts, "");
			
			GetCtrlVal (panelHandle, PANEL_Frequency, &freq);
			GetCtrlVal (panelHandle, PANEL_Time, &time1);

			
			DAQmxCfgSampClkTiming (DataAcq, "OnboardClock", freq, DAQmx_Val_Rising, DAQmx_Val_FiniteSamps, (int)freq*time1);
			
			DAQmxStartTask (DataAcq);
			
			DAQmxReadAnalogF64 (DataAcq, DAQmx_Val_Auto, 10.0, DAQmx_Val_GroupByChannel, daqarray, 10000, &x, 0);
			
			tarray = (float *) malloc(freq * time1 * sizeof(float));
			for (int i=0;i<freq*time1;i++)
			{ tarray[i] = i/freq;}
			
		
			
			plot1 = PlotXY (panelHandle, PANEL_GRAPH, tarray, daqarray, freq*time1, VAL_FLOAT, VAL_DOUBLE, VAL_THIN_LINE, VAL_EMPTY_SQUARE, VAL_SOLID, 1, VAL_RED);
			
			for (int i=0;i<freq*time1;i++)
			{ 
				daqarrayin[i] = daqarray[i];
				tarray1[i] = tarray[i];
			}
			
			zero1 = (double *) malloc(freq*time1 * sizeof(double));
			for (int k=0;k<freq*time1;k++)
			{zero1[k] = 0;}
			
			FFT (daqarray, zero1,freq*time1);
			
			for (int j=0;j<freq*time1/2;j++)
			{freq1[j] = j/time1;
			ftrans[j] = sqrt((daqarray[j]*daqarray[j]) + (zero1[j]*zero1[j]));}
			
			
			plot2 = PlotXY (panelHandle, PANEL_GRAPH_2, freq1, ftrans, freq*time1/2, VAL_FLOAT, VAL_DOUBLE, VAL_THIN_LINE, VAL_EMPTY_SQUARE, VAL_SOLID, 1, VAL_RED);
			
			DAQmxStopTask (DataAcq);
			DAQmxClearTask (DataAcq);
		
			
			//for (int k=0;k<1000;k++)
			//{ printf("%f\n",tarray[k]);}
			//printf("%i",x);
			
			free(tarray);
			break;
	}
	return 0;
}

int CVICALLBACK saveraw (int panel, int control, int event,
						 void *callbackData, int eventData1, int eventData2)
{
	switch (event)
	{
		case EVENT_COMMIT:
			a = freq*time1;
			for (int i=0;i<a;i++)
			{
				savefilearray1[i] = tarray1[i];
				savefilearray1[i + a] = daqarrayin[i];
			} 
			for (int i=0;i<a/2;i++)
			{
				savefilearray2[i] = freq1[i];
				savefilearray2[i+a/2] = ftrans[i];
			}
			
			
			ArrayToFile ("DataFile1.txt", savefilearray1, VAL_DOUBLE, 2*a, 2, VAL_GROUPS_TOGETHER, VAL_GROUPS_AS_COLUMNS, VAL_SEP_BY_TAB, 10, VAL_ASCII, VAL_TRUNCATE);
			ArrayToFile ("DataFile2.txt", savefilearray2, VAL_DOUBLE, a, 2, VAL_GROUPS_TOGETHER, VAL_GROUPS_AS_COLUMNS, VAL_SEP_BY_TAB, 10, VAL_ASCII, VAL_TRUNCATE);						  
			
			break;
	}
	return 0;
}
